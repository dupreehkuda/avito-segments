// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/dupreehkuda/avito-segments/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddSegment mocks base method.
func (m *MockRepository) AddSegment(ctx context.Context, segment models.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSegment", ctx, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSegment indicates an expected call of AddSegment.
func (mr *MockRepositoryMockRecorder) AddSegment(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSegment", reflect.TypeOf((*MockRepository)(nil).AddSegment), ctx, segment)
}

// DeleteSegment mocks base method.
func (m *MockRepository) DeleteSegment(ctx context.Context, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", ctx, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockRepositoryMockRecorder) DeleteSegment(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockRepository)(nil).DeleteSegment), ctx, tag)
}

// GetSegment mocks base method.
func (m *MockRepository) GetSegment(ctx context.Context, tag string) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegment", ctx, tag)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegment indicates an expected call of GetSegment.
func (mr *MockRepositoryMockRecorder) GetSegment(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegment", reflect.TypeOf((*MockRepository)(nil).GetSegment), ctx, tag)
}
