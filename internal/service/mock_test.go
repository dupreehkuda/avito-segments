// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	models "github.com/dupreehkuda/avito-segments/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// DeleteSegments mocks base method.
func (m *MockUserRepository) DeleteSegments(ctx context.Context, segments *models.UserDeleteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegments", ctx, segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegments indicates an expected call of DeleteSegments.
func (mr *MockUserRepositoryMockRecorder) DeleteSegments(ctx, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegments", reflect.TypeOf((*MockUserRepository)(nil).DeleteSegments), ctx, segments)
}

// GetReportData mocks base method.
func (m *MockUserRepository) GetReportData(ctx context.Context, year, month int) ([]models.ReportRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportData", ctx, year, month)
	ret0, _ := ret[0].([]models.ReportRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportData indicates an expected call of GetReportData.
func (mr *MockUserRepositoryMockRecorder) GetReportData(ctx, year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportData", reflect.TypeOf((*MockUserRepository)(nil).GetReportData), ctx, year, month)
}

// GetSegments mocks base method.
func (m *MockUserRepository) GetSegments(ctx context.Context, userID string) (*models.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegments", ctx, userID)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegments indicates an expected call of GetSegments.
func (mr *MockUserRepositoryMockRecorder) GetSegments(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegments", reflect.TypeOf((*MockUserRepository)(nil).GetSegments), ctx, userID)
}

// SetSegments mocks base method.
func (m *MockUserRepository) SetSegments(ctx context.Context, segments *models.UserSetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSegments", ctx, segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSegments indicates an expected call of SetSegments.
func (mr *MockUserRepositoryMockRecorder) SetSegments(ctx, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSegments", reflect.TypeOf((*MockUserRepository)(nil).SetSegments), ctx, segments)
}

// MockSegmentRepository is a mock of SegmentRepository interface.
type MockSegmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentRepositoryMockRecorder
}

// MockSegmentRepositoryMockRecorder is the mock recorder for MockSegmentRepository.
type MockSegmentRepositoryMockRecorder struct {
	mock *MockSegmentRepository
}

// NewMockSegmentRepository creates a new mock instance.
func NewMockSegmentRepository(ctrl *gomock.Controller) *MockSegmentRepository {
	mock := &MockSegmentRepository{ctrl: ctrl}
	mock.recorder = &MockSegmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentRepository) EXPECT() *MockSegmentRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSegmentRepository) Add(ctx context.Context, segment *models.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSegmentRepositoryMockRecorder) Add(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSegmentRepository)(nil).Add), ctx, segment)
}

// Count mocks base method.
func (m *MockSegmentRepository) Count(ctx context.Context, slugs []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, slugs)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSegmentRepositoryMockRecorder) Count(ctx, slugs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSegmentRepository)(nil).Count), ctx, slugs)
}

// Delete mocks base method.
func (m *MockSegmentRepository) Delete(ctx context.Context, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSegmentRepositoryMockRecorder) Delete(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSegmentRepository)(nil).Delete), ctx, slug)
}

// Get mocks base method.
func (m *MockSegmentRepository) Get(ctx context.Context, slug string) (*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, slug)
	ret0, _ := ret[0].(*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSegmentRepositoryMockRecorder) Get(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSegmentRepository)(nil).Get), ctx, slug)
}
