// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package handlers_test is a generated GoMock package.
package handlers_test

import (
	context "context"
	reflect "reflect"

	models "github.com/dupreehkuda/avito-segments/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateReport mocks base method.
func (m *MockService) CreateReport(ctx context.Context, year, month int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReport", ctx, year, month)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReport indicates an expected call of CreateReport.
func (mr *MockServiceMockRecorder) CreateReport(ctx, year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReport", reflect.TypeOf((*MockService)(nil).CreateReport), ctx, year, month)
}

// SegmentAdd mocks base method.
func (m *MockService) SegmentAdd(ctx context.Context, segment *models.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SegmentAdd", ctx, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SegmentAdd indicates an expected call of SegmentAdd.
func (mr *MockServiceMockRecorder) SegmentAdd(ctx, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentAdd", reflect.TypeOf((*MockService)(nil).SegmentAdd), ctx, segment)
}

// SegmentDelete mocks base method.
func (m *MockService) SegmentDelete(ctx context.Context, slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SegmentDelete", ctx, slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// SegmentDelete indicates an expected call of SegmentDelete.
func (mr *MockServiceMockRecorder) SegmentDelete(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentDelete", reflect.TypeOf((*MockService)(nil).SegmentDelete), ctx, slug)
}

// UserDeleteSegments mocks base method.
func (m *MockService) UserDeleteSegments(ctx context.Context, segments *models.UserDeleteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteSegments", ctx, segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDeleteSegments indicates an expected call of UserDeleteSegments.
func (mr *MockServiceMockRecorder) UserDeleteSegments(ctx, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteSegments", reflect.TypeOf((*MockService)(nil).UserDeleteSegments), ctx, segments)
}

// UserGetSegments mocks base method.
func (m *MockService) UserGetSegments(ctx context.Context, userID string) (*models.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetSegments", ctx, userID)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetSegments indicates an expected call of UserGetSegments.
func (mr *MockServiceMockRecorder) UserGetSegments(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetSegments", reflect.TypeOf((*MockService)(nil).UserGetSegments), ctx, userID)
}

// UserSetSegments mocks base method.
func (m *MockService) UserSetSegments(ctx context.Context, segments *models.UserSetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSetSegments", ctx, segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserSetSegments indicates an expected call of UserSetSegments.
func (mr *MockServiceMockRecorder) UserSetSegments(ctx, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSetSegments", reflect.TypeOf((*MockService)(nil).UserSetSegments), ctx, segments)
}
